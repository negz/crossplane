/*
Copyright 2019 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	runtimev1alpha1 "github.com/crossplaneio/crossplane-runtime/apis/core/v1alpha1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// GetBindingPhase of this Bucket.
func (cm *Bucket) GetBindingPhase() runtimev1alpha1.BindingPhase {
	return cm.Status.GetBindingPhase()
}

// GetClassReference of this Bucket.
func (cm *Bucket) GetClassReference() *corev1.ObjectReference {
	return cm.Spec.ClassReference
}

// GetClassSelector of this Bucket.
func (cm *Bucket) GetClassSelector() *metav1.LabelSelector {
	return cm.Spec.ClassSelector
}

// GetCondition of this Bucket.
func (cm *Bucket) GetCondition(ct runtimev1alpha1.ConditionType) runtimev1alpha1.Condition {
	return cm.Status.GetCondition(ct)
}

// GetResourceReference of this Bucket.
func (cm *Bucket) GetResourceReference() *corev1.ObjectReference {
	return cm.Spec.ResourceReference
}

// GetWriteConnectionSecretToReference of this Bucket.
func (cm *Bucket) GetWriteConnectionSecretToReference() *runtimev1alpha1.LocalSecretReference {
	return cm.Spec.WriteConnectionSecretToReference
}

// SetBindingPhase of this Bucket.
func (cm *Bucket) SetBindingPhase(p runtimev1alpha1.BindingPhase) {
	cm.Status.SetBindingPhase(p)
}

// SetClassReference of this Bucket.
func (cm *Bucket) SetClassReference(r *corev1.ObjectReference) {
	cm.Spec.ClassReference = r
}

// SetClassSelector of this Bucket.
func (cm *Bucket) SetClassSelector(s *metav1.LabelSelector) {
	cm.Spec.ClassSelector = s
}

// SetConditions of this Bucket.
func (cm *Bucket) SetConditions(c ...runtimev1alpha1.Condition) {
	cm.Status.SetConditions(c...)
}

// SetResourceReference of this Bucket.
func (cm *Bucket) SetResourceReference(r *corev1.ObjectReference) {
	cm.Spec.ResourceReference = r
}

// SetWriteConnectionSecretToReference of this Bucket.
func (cm *Bucket) SetWriteConnectionSecretToReference(r *runtimev1alpha1.LocalSecretReference) {
	cm.Spec.WriteConnectionSecretToReference = r
}
